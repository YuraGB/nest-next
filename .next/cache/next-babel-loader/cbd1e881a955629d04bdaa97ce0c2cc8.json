{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from \"@apollo/client\";\nlet globalApolloClient;\n\nfunction initApolloClient(initialState) {\n  if (!globalApolloClient) {\n    globalApolloClient = new ApolloClient({\n      link: new HttpLink({\n        uri: \"https://localhost:3000/graphql\"\n      }),\n      cache: new InMemoryCache().restore(initialState || {})\n    });\n  } // client side page transition to an SSG page => update Apollo cache\n  else if (initialState) {\n      globalApolloClient.cache.restore(_objectSpread(_objectSpread({}, globalApolloClient.cache.extract()), initialState));\n    }\n\n  return globalApolloClient;\n}\n\nexport function withApollo(PageComponent) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloStaticCache\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloStaticCache\"]);\n\n    // HERE WE USE THE PASSED CACHE\n    const client = initApolloClient(apolloStaticCache); // and here we have the initialized client ðŸ™‚\n\n    console.log(client);\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  }; // if you also use it for SSR\n\n\n  if (PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async () => {\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      return pageProps;\n    };\n  } // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  return WithApollo;\n}","map":{"version":3,"sources":["/home/yurii/Projects/nestandnext/lib/withApollo.js"],"names":["ApolloClient","ApolloProvider","HttpLink","InMemoryCache","globalApolloClient","initApolloClient","initialState","link","uri","cache","restore","extract","withApollo","PageComponent","WithApollo","apolloStaticCache","pageProps","client","console","log","getInitialProps","ctx","displayName","name"],"mappings":";;;;;;;;;;;;;AACA,SACIA,YADJ,EAEIC,cAFJ,EAGIC,QAHJ,EAIIC,aAJJ,QAKO,gBALP;AAOA,IAAIC,kBAAJ;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACpC,MAAI,CAACF,kBAAL,EAAyB;AACrBA,IAAAA,kBAAkB,GAAG,IAAIJ,YAAJ,CAAiB;AAClCO,MAAAA,IAAI,EAAE,IAAIL,QAAJ,CAAa;AACfM,QAAAA,GAAG,EAAE;AADU,OAAb,CAD4B;AAIlCC,MAAAA,KAAK,EAAE,IAAIN,aAAJ,GAAoBO,OAApB,CAA4BJ,YAAY,IAAI,EAA5C;AAJ2B,KAAjB,CAArB;AAMH,GAPD,CAQA;AARA,OASK,IAAIA,YAAJ,EAAkB;AACnBF,MAAAA,kBAAkB,CAACK,KAAnB,CAAyBC,OAAzB,iCACON,kBAAkB,CAACK,KAAnB,CAAyBE,OAAzB,EADP,GAEOL,YAFP;AAIH;;AACD,SAAOF,kBAAP;AACH;;AAED,OAAO,SAASQ,UAAT,CAAoBC,aAApB,EAAmC;AACtC,QAAMC,UAAU,GAAG,UAAyC;AAAA,QAAxC;AAAEC,MAAAA;AAAF,KAAwC;AAAA,QAAhBC,SAAgB;;AACxD;AACA,UAAMC,MAAM,GAAGZ,gBAAgB,CAACU,iBAAD,CAA/B,CAFwD,CAGxD;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,WACI,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA;AAAxB,OACI,MAAC,aAAD,EAAmBD,SAAnB,CADJ,CADJ;AAKH,GAVD,CADsC,CAYtC;;;AACA,MAAIH,aAAa,CAACO,eAAlB,EAAmC;AAC/BN,IAAAA,UAAU,CAACM,eAAX,GAA6B,YAAY;AACrC;AACA,UAAIJ,SAAS,GAAG,EAAhB;;AACA,UAAIH,aAAa,CAACO,eAAlB,EAAmC;AAC/BJ,QAAAA,SAAS,GAAG,MAAMH,aAAa,CAACO,eAAd,CAA8BC,GAA9B,CAAlB;AACH;;AACD,aAAOL,SAAP;AACH,KAPD;AAQH,GAtBqC,CAwBtC;;;AACA,YAA2C;AACvC,UAAMM,WAAW,GACbT,aAAa,CAACS,WAAd,IAA6BT,aAAa,CAACU,IAA3C,IAAmD,WADvD;AAGAT,IAAAA,UAAU,CAACQ,WAAX,GAA0B,cAAaA,WAAY,GAAnD;AACH;;AACD,SAAOR,UAAP;AACH","sourcesContent":["\nimport {\n    ApolloClient,\n    ApolloProvider,\n    HttpLink,\n    InMemoryCache\n} from \"@apollo/client\";\n\nlet globalApolloClient;\n\nfunction initApolloClient(initialState) {\n    if (!globalApolloClient) {\n        globalApolloClient = new ApolloClient({\n            link: new HttpLink({\n                uri: \"https://localhost:3000/graphql\"\n            }),\n            cache: new InMemoryCache().restore(initialState || {})\n        });\n    }\n    // client side page transition to an SSG page => update Apollo cache\n    else if (initialState) {\n        globalApolloClient.cache.restore({\n            ...globalApolloClient.cache.extract(),\n            ...initialState\n        });\n    }\n    return globalApolloClient;\n}\n\nexport function withApollo(PageComponent) {\n    const WithApollo = ({ apolloStaticCache, ...pageProps }) => {\n        // HERE WE USE THE PASSED CACHE\n        const client = initApolloClient(apolloStaticCache);\n        // and here we have the initialized client ðŸ™‚\n        console.log(client);\n        return (\n            <ApolloProvider client={client}>\n                <PageComponent {...pageProps} />\n            </ApolloProvider>\n        );\n    };\n    // if you also use it for SSR\n    if (PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = async () => {\n            // Run wrapped getInitialProps methods\n            let pageProps = {};\n            if (PageComponent.getInitialProps) {\n                pageProps = await PageComponent.getInitialProps(ctx);\n            }\n            return pageProps;\n        };\n    }\n\n    // Set the correct displayName in development\n    if (process.env.NODE_ENV !== \"production\") {\n        const displayName =\n            PageComponent.displayName || PageComponent.name || \"Component\";\n\n        WithApollo.displayName = `withApollo(${displayName})`;\n    }\n    return WithApollo;\n}"]},"metadata":{},"sourceType":"module"}