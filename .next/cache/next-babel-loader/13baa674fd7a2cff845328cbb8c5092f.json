{"ast":null,"code":"import { ApolloClient, createNetworkInterface } from \"react-apollo\";\nimport fetch from \"isomorphic-fetch\";\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!false) {\n  global.fetch = fetch;\n}\n\nfunction create(headers, initialState) {\n  return new ApolloClient({\n    initialState,\n    ssrMode: !false,\n    // Disables forceFetch on the server (so queries are only run once)\n    networkInterface: createNetworkInterface({\n      uri: \"http://localhost:3000/graphql\",\n      // Server URL (must be absolute)\n      opts: {\n        // Additional fetch() options like `credentials` or `headers`\n        credentials: \"same-origin\"\n      }\n    })\n  });\n}\n\nexport default function initApollo(headers, initialState = {}) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!false) {\n    return create(headers, initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(headers, initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/home/yurii/Projects/nestandnext/lib/initApollo.js"],"names":["ApolloClient","createNetworkInterface","fetch","apolloClient","global","create","headers","initialState","ssrMode","networkInterface","uri","opts","credentials","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,sBAAvB,QAAqD,cAArD;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,MAAJ,EAAsB;AAClBC,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACH;;AAED,SAASG,MAAT,CAAgBC,OAAhB,EAAyBC,YAAzB,EAAuC;AACnC,SAAO,IAAIP,YAAJ,CAAiB;AACpBO,IAAAA,YADoB;AAEpBC,IAAAA,OAAO,EAAE,MAFW;AAEO;AAC3BC,IAAAA,gBAAgB,EAAER,sBAAsB,CAAC;AACrCS,MAAAA,GAAG,EAAE,+BADgC;AACC;AACtCC,MAAAA,IAAI,EAAE;AACF;AACAC,QAAAA,WAAW,EAAE;AAFX;AAF+B,KAAD;AAHpB,GAAjB,CAAP;AAWH;;AAED,eAAe,SAASC,UAAT,CAAoBP,OAApB,EAA6BC,YAAY,GAAG,EAA5C,EAAgD;AAC3D;AACA;AACA,MAAI,MAAJ,EAAsB;AAClB,WAAOF,MAAM,CAACC,OAAD,EAAUC,YAAV,CAAb;AACH,GAL0D,CAO3D;;;AACA,MAAI,CAACJ,YAAL,EAAmB;AACfA,IAAAA,YAAY,GAAGE,MAAM,CAACC,OAAD,EAAUC,YAAV,CAArB;AACH;;AAED,SAAOJ,YAAP;AACH","sourcesContent":["import { ApolloClient, createNetworkInterface } from \"react-apollo\";\nimport fetch from \"isomorphic-fetch\";\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n    global.fetch = fetch;\n}\n\nfunction create(headers, initialState) {\n    return new ApolloClient({\n        initialState,\n        ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n        networkInterface: createNetworkInterface({\n            uri: \"http://localhost:3000/graphql\", // Server URL (must be absolute)\n            opts: {\n                // Additional fetch() options like `credentials` or `headers`\n                credentials: \"same-origin\"\n            }\n        })\n    });\n}\n\nexport default function initApollo(headers, initialState = {}) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (!process.browser) {\n        return create(headers, initialState);\n    }\n\n    // Reuse client on the client-side\n    if (!apolloClient) {\n        apolloClient = create(headers, initialState);\n    }\n\n    return apolloClient;\n}"]},"metadata":{},"sourceType":"module"}