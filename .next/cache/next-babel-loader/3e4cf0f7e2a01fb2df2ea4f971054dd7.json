{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: 'http://localhost:3000/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/yurii/Projects/nestandnext/lib/apolloClient.js"],"names":["useMemo","ApolloClient","InMemoryCache","HttpLink","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIJ,YAAJ,CAAiB;AACpBK,IAAAA,OAAO,MADa;AAEpBC,IAAAA,IAAI,EAAE,IAAIJ,QAAJ,CAAa;AACfK,MAAAA,GAAG,EAAE,+BADU;AACuB;AACtCC,MAAAA,WAAW,EAAE,aAFE,CAEa;;AAFb,KAAb,CAFc;AAMpBC,IAAAA,KAAK,EAAE,IAAIR,aAAJ;AANa,GAAjB,CAAP;AAQH;;AAED,OAAO,SAASS,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AAClD,QAAMC,aAAa,qBAAGT,YAAH,2DAAmBC,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIO,YAAJ,EAAkB;AACdC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACH,GAPiD,CAQlD;;;AACA,YAAmC,OAAOC,aAAP,CATe,CAUlD;;AACA,MAAI,CAACT,YAAL,EAAmBA,YAAY,GAAGS,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACpC,QAAMI,KAAK,GAAGhB,OAAO,CAAC,MAAMW,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACH","sourcesContent":["import { useMemo } from 'react'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\n\nlet apolloClient;\n\nfunction createApolloClient() {\n    return new ApolloClient({\n        ssrMode: typeof window === 'undefined',\n        link: new HttpLink({\n            uri: 'http://localhost:3000/graphql', // Server URL (must be absolute)\n            credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n        }),\n        cache: new InMemoryCache(),\n    })\n}\n\nexport function initializeApollo(initialState = null) {\n    const _apolloClient = apolloClient ?? createApolloClient();\n\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n    // gets hydrated here\n    if (initialState) {\n        _apolloClient.cache.restore(initialState)\n    }\n    // For SSG and SSR always create a new Apollo Client\n    if (typeof window === 'undefined') return _apolloClient\n    // Create the Apollo Client once in the client\n    if (!apolloClient) apolloClient = _apolloClient\n\n    return _apolloClient\n}\n\nexport function useApollo(initialState) {\n    const store = useMemo(() => initializeApollo(initialState), [initialState])\n    return store\n}"]},"metadata":{},"sourceType":"module"}