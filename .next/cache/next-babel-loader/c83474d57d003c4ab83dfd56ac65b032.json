{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApolloProvider, getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nexport default (ComposedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      const headers = ctx.req ? ctx.req.headers : {};\n      let serverState = {}; // Evaluate the composed component's getInitialProps()\n\n      let composedInitialProps = {};\n\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n      } // Run all graphql queries in the component tree\n      // and extract the resulting data\n\n\n      if (!false) {\n        const apollo = initApollo(headers); // Provide the `url` prop data in case a graphql query uses it\n\n        const url = {\n          query: ctx.query,\n          pathname: ctx.pathname\n        }; // Run all graphql queries\n\n        const app = __jsx(ApolloProvider, {\n          client: apollo\n        }, __jsx(ComposedComponent, _extends({\n          url: url\n        }, composedInitialProps)));\n\n        await getDataFromTree(app); // Extract query data from the Apollo's store\n\n        const state = apollo.getInitialState();\n        serverState = {\n          apollo: {\n            // Make sure to only include Apollo's data state\n            data: state.data\n          }\n        };\n      }\n\n      return _objectSpread({\n        serverState,\n        headers\n      }, composedInitialProps);\n    }\n\n    constructor(props) {\n      super(props);\n      this.apollo = initApollo(this.props.headers, this.props.serverState);\n    }\n\n    render() {\n      return __jsx(ApolloProvider, {\n        client: this.apollo\n      }, __jsx(ComposedComponent, this.props));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${ComposedComponent.displayName})`), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/home/yurii/Projects/nestandnext/lib/withApollo.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","initApollo","ComposedComponent","WithData","Component","getInitialProps","ctx","headers","req","serverState","composedInitialProps","apollo","url","query","pathname","app","state","getInitialState","data","constructor","props","render","displayName","object","isRequired"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,gBAAeC,iBAAiB,IAAI;AAAA;;AAChC,0BAAO,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAM1C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAC9B,YAAMC,OAAO,GAAGD,GAAG,CAACE,GAAJ,GAAUF,GAAG,CAACE,GAAJ,CAAQD,OAAlB,GAA4B,EAA5C;AACA,UAAIE,WAAW,GAAG,EAAlB,CAF8B,CAI9B;;AACA,UAAIC,oBAAoB,GAAG,EAA3B;;AACA,UAAIR,iBAAiB,CAACG,eAAtB,EAAuC;AACnCK,QAAAA,oBAAoB,GAAG,MAAMR,iBAAiB,CAACG,eAAlB,CAAkCC,GAAlC,CAA7B;AACH,OAR6B,CAU9B;AACA;;;AACA,UAAI,MAAJ,EAAsB;AAClB,cAAMK,MAAM,GAAGV,UAAU,CAACM,OAAD,CAAzB,CADkB,CAElB;;AACA,cAAMK,GAAG,GAAG;AAAEC,UAAAA,KAAK,EAAEP,GAAG,CAACO,KAAb;AAAoBC,UAAAA,QAAQ,EAAER,GAAG,CAACQ;AAAlC,SAAZ,CAHkB,CAKlB;;AACA,cAAMC,GAAG,GACL,MAAC,cAAD;AAAgB,UAAA,MAAM,EAAEJ;AAAxB,WACA,MAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEC;AAAxB,WAAiCF,oBAAjC,EADA,CADJ;;AAKA,cAAMV,eAAe,CAACe,GAAD,CAArB,CAXkB,CAalB;;AACA,cAAMC,KAAK,GAAGL,MAAM,CAACM,eAAP,EAAd;AAEAR,QAAAA,WAAW,GAAG;AACVE,UAAAA,MAAM,EAAE;AACJ;AACAO,YAAAA,IAAI,EAAEF,KAAK,CAACE;AAFR;AADE,SAAd;AAMH;;AAED;AACIT,QAAAA,WADJ;AAEIF,QAAAA;AAFJ,SAGOG,oBAHP;AAKH;;AAEDS,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;AACA,WAAKT,MAAL,GAAcV,UAAU,CAAC,KAAKmB,KAAL,CAAWb,OAAZ,EAAqB,KAAKa,KAAL,CAAWX,WAAhC,CAAxB;AACH;;AAEDY,IAAAA,MAAM,GAAG;AACL,aACI,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAE,KAAKV;AAA7B,SACI,MAAC,iBAAD,EAAuB,KAAKS,KAA5B,CADJ,CADJ;AAKH;;AA5DyC,GAA9C,yCAC0B,YAAWlB,iBAAiB,CAACoB,WAAY,GADnE,wCAEuB;AACfb,IAAAA,WAAW,EAAEX,SAAS,CAACyB,MAAV,CAAiBC;AADf,GAFvB;AA8DH,CA/DD","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApolloProvider, getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\n\nexport default ComposedComponent => {\n    return class WithData extends React.Component {\n        static displayName = `WithData(${ComposedComponent.displayName})`;\n        static propTypes = {\n            serverState: PropTypes.object.isRequired\n        };\n\n        static async getInitialProps(ctx) {\n            const headers = ctx.req ? ctx.req.headers : {};\n            let serverState = {};\n\n            // Evaluate the composed component's getInitialProps()\n            let composedInitialProps = {};\n            if (ComposedComponent.getInitialProps) {\n                composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n            }\n\n            // Run all graphql queries in the component tree\n            // and extract the resulting data\n            if (!process.browser) {\n                const apollo = initApollo(headers);\n                // Provide the `url` prop data in case a graphql query uses it\n                const url = { query: ctx.query, pathname: ctx.pathname };\n\n                // Run all graphql queries\n                const app = (\n                    <ApolloProvider client={apollo}>\n                    <ComposedComponent url={url} {...composedInitialProps} />\n                </ApolloProvider>\n            );\n                await getDataFromTree(app);\n\n                // Extract query data from the Apollo's store\n                const state = apollo.getInitialState();\n\n                serverState = {\n                    apollo: {\n                        // Make sure to only include Apollo's data state\n                        data: state.data\n                    }\n                };\n            }\n\n            return {\n                serverState,\n                headers,\n                ...composedInitialProps\n            };\n        }\n\n        constructor(props) {\n            super(props);\n            this.apollo = initApollo(this.props.headers, this.props.serverState);\n        }\n\n        render() {\n            return (\n                <ApolloProvider client={this.apollo}>\n                    <ComposedComponent {...this.props} />\n                </ApolloProvider>\n            );\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}