{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApolloProvider, getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nexport default (function (ComposedComponent) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    var _super = _createSuper(WithData);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n          var headers, serverState, composedInitialProps, apollo, url, app, state;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  headers = ctx.req ? ctx.req.headers : {};\n                  serverState = {}; // Evaluate the composed component's getInitialProps()\n\n                  composedInitialProps = {};\n\n                  if (!ComposedComponent.getInitialProps) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return ComposedComponent.getInitialProps(ctx);\n\n                case 6:\n                  composedInitialProps = _context.sent;\n\n                case 7:\n                  if (true) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  apollo = initApollo(headers); // Provide the `url` prop data in case a graphql query uses it\n\n                  url = {\n                    query: ctx.query,\n                    pathname: ctx.pathname\n                  }; // Run all graphql queries\n\n                  app = __jsx(ApolloProvider, {\n                    client: apollo\n                  }, __jsx(ComposedComponent, _extends({\n                    url: url\n                  }, composedInitialProps)));\n                  _context.next = 13;\n                  return getDataFromTree(app);\n\n                case 13:\n                  // Extract query data from the Apollo's store\n                  state = apollo.getInitialState();\n                  serverState = {\n                    apollo: {\n                      // Make sure to only include Apollo's data state\n                      data: state.data\n                    }\n                  };\n\n                case 15:\n                  return _context.abrupt(\"return\", _objectSpread({\n                    serverState: serverState,\n                    headers: headers\n                  }, composedInitialProps));\n\n                case 16:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _super.call(this, props);\n      _this.apollo = initApollo(_this.props.headers, _this.props.serverState);\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(ApolloProvider, {\n          client: this.apollo\n        }, __jsx(ComposedComponent, this.props));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(ComposedComponent.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/home/yurii/Projects/nestandnext/lib/withApollo.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","initApollo","ComposedComponent","ctx","headers","req","serverState","composedInitialProps","getInitialProps","apollo","url","query","pathname","app","state","getInitialState","data","props","Component","displayName","object","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,gBAAe,UAAAC,iBAAiB,EAAI;AAAA;;AAChC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,yGAMiCC,GANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAOcC,kBAAAA,OAPd,GAOwBD,GAAG,CAACE,GAAJ,GAAUF,GAAG,CAACE,GAAJ,CAAQD,OAAlB,GAA4B,EAPpD;AAQYE,kBAAAA,WARZ,GAQ0B,EAR1B,EAUQ;;AACIC,kBAAAA,oBAXZ,GAWmC,EAXnC;;AAAA,uBAYYL,iBAAiB,CAACM,eAZ9B;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAayCN,iBAAiB,CAACM,eAAlB,CAAkCL,GAAlC,CAbzC;;AAAA;AAaYI,kBAAAA,oBAbZ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBkBE,kBAAAA,MAnBlB,GAmB2BR,UAAU,CAACG,OAAD,CAnBrC,EAoBY;;AACMM,kBAAAA,GArBlB,GAqBwB;AAAEC,oBAAAA,KAAK,EAAER,GAAG,CAACQ,KAAb;AAAoBC,oBAAAA,QAAQ,EAAET,GAAG,CAACS;AAAlC,mBArBxB,EAuBY;;AACMC,kBAAAA,GAxBlB,GAyBgB,MAAC,cAAD;AAAgB,oBAAA,MAAM,EAAEJ;AAAxB,qBACA,MAAC,iBAAD;AAAmB,oBAAA,GAAG,EAAEC;AAAxB,qBAAiCH,oBAAjC,EADA,CAzBhB;AAAA;AAAA,yBA6BkBP,eAAe,CAACa,GAAD,CA7BjC;;AAAA;AA+BY;AACMC,kBAAAA,KAhClB,GAgC0BL,MAAM,CAACM,eAAP,EAhC1B;AAkCYT,kBAAAA,WAAW,GAAG;AACVG,oBAAAA,MAAM,EAAE;AACJ;AACAO,sBAAAA,IAAI,EAAEF,KAAK,CAACE;AAFR;AADE,mBAAd;;AAlCZ;AAAA;AA2CYV,oBAAAA,WAAW,EAAXA,WA3CZ;AA4CYF,oBAAAA,OAAO,EAAPA;AA5CZ,qBA6CeG,oBA7Cf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAiDI,sBAAYU,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gCAAMA,KAAN;AACA,YAAKR,MAAL,GAAcR,UAAU,CAAC,MAAKgB,KAAL,CAAWb,OAAZ,EAAqB,MAAKa,KAAL,CAAWX,WAAhC,CAAxB;AAFe;AAGlB;;AApDL;AAAA;AAAA,+BAsDa;AACL,eACI,MAAC,cAAD;AAAgB,UAAA,MAAM,EAAE,KAAKG;AAA7B,WACI,MAAC,iBAAD,EAAuB,KAAKQ,KAA5B,CADJ,CADJ;AAKH;AA5DL;;AAAA;AAAA,IAA8BpB,KAAK,CAACqB,SAApC,6DACqChB,iBAAiB,CAACiB,WADvD,8CAEuB;AACfb,IAAAA,WAAW,EAAER,SAAS,CAACsB,MAAV,CAAiBC;AADf,GAFvB;AA8DH,CA/DD","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApolloProvider, getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\n\nexport default ComposedComponent => {\n    return class WithData extends React.Component {\n        static displayName = `WithData(${ComposedComponent.displayName})`;\n        static propTypes = {\n            serverState: PropTypes.object.isRequired\n        };\n\n        static async getInitialProps(ctx) {\n            const headers = ctx.req ? ctx.req.headers : {};\n            let serverState = {};\n\n            // Evaluate the composed component's getInitialProps()\n            let composedInitialProps = {};\n            if (ComposedComponent.getInitialProps) {\n                composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n            }\n\n            // Run all graphql queries in the component tree\n            // and extract the resulting data\n            if (!process.browser) {\n                const apollo = initApollo(headers);\n                // Provide the `url` prop data in case a graphql query uses it\n                const url = { query: ctx.query, pathname: ctx.pathname };\n\n                // Run all graphql queries\n                const app = (\n                    <ApolloProvider client={apollo}>\n                    <ComposedComponent url={url} {...composedInitialProps} />\n                </ApolloProvider>\n            );\n                await getDataFromTree(app);\n\n                // Extract query data from the Apollo's store\n                const state = apollo.getInitialState();\n\n                serverState = {\n                    apollo: {\n                        // Make sure to only include Apollo's data state\n                        data: state.data\n                    }\n                };\n            }\n\n            return {\n                serverState,\n                headers,\n                ...composedInitialProps\n            };\n        }\n\n        constructor(props) {\n            super(props);\n            this.apollo = initApollo(this.props.headers, this.props.serverState);\n        }\n\n        render() {\n            return (\n                <ApolloProvider client={this.apollo}>\n                    <ComposedComponent {...this.props} />\n                </ApolloProvider>\n            );\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}